{"version":3,"file":"static/js/660.315afe89.chunk.js","mappings":"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","sources":["components/Form/Form.styled.jsx","components/Form/Form.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactsList/ContactList.styled.jsx","components/ContactItem/ContactItem.jsx","redux/selectors.js","components/ContactsList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const Input = styled(Field)`\n  width: 250px;\n  height: 25px;\n  font-size: inherit;\n`;\n\nexport const Button = styled.button`\n  background-color: #0a66c2;\n  border: none;\n  border-radius: 100px;\n  color: #ffffff;\n  cursor: pointer;\n  font: inherit;\n  max-width: 480px;\n  min-height: 40px;\n  overflow: hidden;\n  padding: 0px;\n  padding-left: 20px;\n  padding-right: 20px;\n  /* touch-action: manipulation; */\n  transition: background-color 0.167s cubic-bezier(0.4, 0, 0.2, 1) 0s,\n    box-shadow 0.167s cubic-bezier(0.4, 0, 0.2, 1) 0s,\n    color 0.167s cubic-bezier(0.4, 0, 0.2, 1) 0s;\n\n  &:hover {\n    background-color: #16437e;\n    box-shadow: rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px;\n  }\n\n  &:disabled {\n    cursor: not-allowed;\n    background: rgba(0, 0, 0, 0.08);\n    color: rgba(0, 0, 0, 0.3);\n  }\n`;\n","import { Formik, Form, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { Box } from 'components/Box/Box';\nimport { Input, Button } from './Form.styled';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/operations';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example, 'Adrian', 'Jacob Mercer', 'Charles de Batz de Castelmore d'Artagnan'\"\n    )\n    .required('Add the name, please'),\n  number: yup\n    .string()\n    .matches(\n      /(\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9})/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Add the phone number, please'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <label htmlFor=\"name\">Name</label>\n        <Box display=\"flex\" alignItems=\"baseline\" gridGap={10}>\n          <Input name=\"name\" id=\"name\" />\n          <ErrorMessage name=\"name\" />\n        </Box>\n\n        <label htmlFor=\"number\">Number</label>\n        <Box display=\"flex\" alignItems=\"baseline\" gridGap={10}>\n          <Input name=\"number\" />\n          <ErrorMessage name=\"number\" id=\"number\" />\n        </Box>\n\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Input = styled.input`\n  width: 250px;\n  height: 25px;\n  font: inherit;\n`;\n","import { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/filterSlice';\nimport { Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <label htmlFor=\"filter\">Find a contact by name</label>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        id=\"filter\"\n        onChange={e => {\n          dispatch(filterContacts(e.target.value));\n        }}\n      />\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n`;\n\nexport const Button = styled.button`\n  background: #ffffff;\n  border: 1px solid #ff4742;\n  border-radius: 10px;\n  color: #ff4742;\n  cursor: pointer;\n  font: inherit;\n  max-width: 480px;\n  overflow: hidden;\n  padding: 4px 14px;\n  box-shadow: rgba(0, 0, 0, 0.1) 1px 2px 4px;\n  /* touch-action: manipulation; */\n  transition: background-color 0.167s cubic-bezier(0.4, 0, 0.2, 1) 0s,\n    box-shadow 0.167s cubic-bezier(0.4, 0, 0.2, 1) 0s,\n    color 0.167s cubic-bezier(0.4, 0, 0.2, 1) 0s;\n\n  &:hover {\n    background-color: #ff4742;\n    color: #ffffff;\n    box-shadow: rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { Button } from '../ContactsList/ContactList.styled';\n\nexport const ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const { id, name, number } = contact;\n  return (\n    <>\n      <p>\n        {name}: {number}\n      </p>\n      <Button onClick={() => dispatch(deleteContact(id))}>Delete</Button>\n    </>\n  );\n};\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n","import { Box } from 'components/Box/Box';\nimport { List } from './ContactList.styled';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { selectContacts, selectFilter } from 'redux/selectors';\nimport { useSelector } from 'react-redux';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const visibleContacts = filter\n    ? contacts.filter(contact => contact.name.toLowerCase().includes(filter))\n    : contacts;\n\n  return (\n    <List>\n      {visibleContacts.map(contact => (\n        <li key={contact.id}>\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            width={450}\n          >\n            <ContactItem contact={contact} />\n          </Box>\n        </li>\n      ))}\n    </List>\n  );\n};\n","import { useEffect } from 'react';\n// import { Link, useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Box } from '../components/Box/Box';\nimport { ContactForm } from 'components/Form/Form';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactsList/ContactList';\n\nimport { fetchContacts } from 'redux/operations';\nimport { selectContacts, selectIsLoading, selectError } from 'redux/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      gridGap={10}\n      width={[1 / 4]}\n      ml={'auto'}\n      mr={'auto'}\n      p={20}\n    >\n      <ContactForm />\n      {isLoading && !error && <p>Request is in progress...</p>}\n\n      {contacts.length > 0 && (\n        <>\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </>\n      )}\n\n      {!isLoading && !error && contacts.length === 0 && (\n        <h2>No contacts yet. Fill the fields to add some.</h2>\n      )}\n    </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["Input","styled","Field","Button","schema","yup","shape","name","matches","required","number","ContactForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","addContact","htmlFor","Box","display","alignItems","gridGap","id","type","Filter","onChange","e","filterContacts","target","value","List","ContactItem","contact","onClick","deleteContact","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","ContactList","useSelector","visibleContacts","toLowerCase","includes","map","justifyContent","width","useEffect","fetchContacts","flexDirection","ml","mr","p","length"],"sourceRoot":""}